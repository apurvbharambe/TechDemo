apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'stock_data'
        metrics_path: '/metrics/'
        static_configs:
          - targets: ['django-service:8000']  # Update this to your Django backend service name

    rule_files:
      - '/etc/prometheus/alerts.yml'

    alerting:
      alertmanagers:
        - static_configs:
          - targets:
            - '192.168.49.2:31002'  # Service name in Kubernetes

  alerts.yml: |
    groups:
      - name: stock_alerts
        rules:
          - alert: PositivePriceChangeAlert
            expr: price_change_24h{change_period="24_hours"} > 2
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Price change percentage for stock {{ $labels.stock }} is above 2%"
              description: "The price change percentage for stock {{ $labels.stock }} has been above 2% for more than 1 minute."

          - alert: NegativePriceChangeAlert
            expr: price_change_24h{change_period="24_hours"} < -2
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Price change percentage for stock {{ $labels.stock }} is below 2%"
              description: "The price change percentage for stock {{ $labels.stock }} has been below -2% for more than 1 minute."

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
              readOnly: true
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config


---


apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: default
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      nodePort: 31000  # NodePort for external access
  type: NodePort  # Expose as NodePort


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'apurvabharambe1@gmail.com'
      smtp_auth_username: 'apurvabharambe1@gmail.com'
      smtp_auth_password: 
      smtp_require_tls: true

    receivers:
      - name: 'email_notifications'
        email_configs:
          - to: 'apurvabharambe1@gmail.com'
            send_resolved: true

    route:
      receiver: 'email_notifications'
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 24h


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30005

